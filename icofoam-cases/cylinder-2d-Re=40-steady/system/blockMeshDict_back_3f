/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  6
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

convertToMeters 1;

L       20;    // Channel length
H       5;     // Channel height
W       0.1;   // Channel width (2D)
rad     0.5;   // Cylinder radius 
r2      1.0;   // Outer circular radius
Alf     45;    // Cylinder corner angle
mx      0.75;  // Horizontal cylinder center
my      0.5;   // Vertical cylinder center

nc      10;    // cyl-quarter grid
nn      5;     // cyl-normal grid
nb      30;    // cyl-back grid
nf      10;    // cyl-front grid
ns      10;    // cyl-side grid
nz      1;     // Vertical grid
       
alf     #calc "degToRad($Alf)";
mrad    #calc "-$rad";
mr2     #calc "-$r2";

// Cylinder and outer circular region points

xc1     #calc "$rad * cos($alf)";
yc1     #calc "$rad * sin($alf)";

xc2     #calc "-$xc1";
yc2     #calc "-$yc1";

xo1     #calc "$r2 * cos($alf)";
yo1     #calc "$r2 * sin($alf)";

xo2     #calc "-$xo1";
yo2     #calc "-$yo1";

// Outer channel corner points

XR      #calc "$mx * $L";
XL      #calc "($mx-1) * $L";
YT      #calc "$my * $H";
YB      #calc "($my-1) * $H";
WF      #calc " 0.5 * $W";
WB      #calc "-0.5 * $W";

#calc   "printf(\"xc1 = %f, yc1 = %f, xc2 = %f, yc2 = %f, WF = %f\n\", $xc1, $yc1, $xc2, $yc2, $WF)";
#calc   "printf(\"xo1 = %f, yo1 = %f, xo2 = %f, yo2 = %f, WB = %f\n\", $xo1, $yo1, $xo2, $yo2, $WB)";

vertices
(
//==== Cylinder Blocks (RTLB)

    ( $xc1   $yc1   $WB )
    ( $xc2   $yc1   $WB )
    ( $xc2   $yc2   $WB )
    ( $xc1   $yc2   $WB )

    ( $xo1   $yo1   $WB )
    ( $xo2   $yo1   $WB )
    ( $xo2   $yo2   $WB )
    ( $xo1   $yo2   $WB )

    ( $xc1   $yc1   $WF )
    ( $xc2   $yc1   $WF )
    ( $xc2   $yc2   $WF )
    ( $xc1   $yc2   $WF )

    ( $xo1   $yo1   $WF )
    ( $xo2   $yo1   $WF )
    ( $xo2   $yo2   $WF )
    ( $xo1   $yo2   $WF )

//==== Near Blocks (RTLB)

    ( $XR    $yo2   $WB )
    ( $XR    $yo1   $WB )
    ( $XR    $yo2   $WF )
    ( $XR    $yo1   $WF )

    ( $xo1   $YT    $WB )
    ( $xo2   $YT    $WB )
    ( $xo1   $YT    $WF )
    ( $xo2   $YT    $WF )

    ( $XL    $yo1   $WB )
    ( $XL    $yo2   $WB )
    ( $XL    $yo1   $WF )
    ( $XL    $yo2   $WF )

    ( $xo2   $YB    $WB )
    ( $xo1   $YB    $WB )
    ( $xo2   $YB    $WF )
    ( $xo1   $YB    $WF )

//==== Corner Blocks (RB-RT-LT-LB)

    ( $XR    $YB    $WB )
    ( $XR    $YB    $WF )

    ( $XR    $YT    $WB )
    ( $XR    $YT    $WF )

    ( $XL    $YT    $WB )
    ( $XL    $YT    $WF )

    ( $XL    $YB    $WB )
    ( $XL    $YB    $WF )

);


edges
(
    arc 0  3   ( $rad  0.0   $WB )
    arc 4  7   ( $r2   0.0   $WB )

    arc 8  11  ( $rad  0.0   $WF )
    arc 12 15  ( $r2   0.0   $WF ) 

    arc 0  1   ( 0.0   $rad  $WB )
    arc 4  5   ( 0.0   $r2   $WB )

    arc 8  9   ( 0.0   $rad  $WF )
    arc 12 13  ( 0.0   $r2   $WF )

    arc 1  2   ( $mrad  0.0   $WB )
    arc 5  6   ( $mr2   0.0   $WB )

    arc 9  10  ( $mrad  0.0   $WF )
    arc 13 14  ( $mr2   0.0   $WF ) 

    arc 2  3   ( 0.0   $mrad  $WB )
    arc 6  7   ( 0.0   $mr2   $WB )

    arc 10 11  ( 0.0   $mrad  $WF )
    arc 14 15  ( 0.0   $mr2   $WF )
);

blocks
(
   // Cylinder blocks (RTLB)

   hex ( 0  3  7  4  8  11 15 12 ) ($nc $nn $nz) simpleGrading (1 1 1)
   hex ( 1  0  4  5  9  8  12 13 ) ($nc $nn $nz) simpleGrading (1 1 1)
   hex ( 2  1  5  6  10 9  13 14 ) ($nc $nn $nz) simpleGrading (1 1 1)
   hex ( 6  7  3  2  14 15 11 10 ) ($nc $nn $nz) simpleGrading (1 1 1)

   // Neighbor blocks (RTLB)

   hex ( 4  7  16 17 12 15 18 19 ) ($nc $nb $nz) simpleGrading (1 1 1)
   hex ( 5  4  20 21 13 12 22 23 ) ($nc $ns $nz) simpleGrading (1 1 1)
   hex ( 6  5  24 25 14 13 26 27 ) ($nc $nf $nz) simpleGrading (1 1 1)
   hex ( 7  6  28 29 15 14 30 31 ) ($nc $ns $nz) simpleGrading (1 1 1)

   // Corner blocks (RB-RT-LT-LB)

   hex ( 7  29 32 16 15 31 33 18 ) ($ns $nb $nz) simpleGrading (1 1 1)
   hex ( 20 4  17 34 22 12 19 35 ) ($ns $nb $nz) simpleGrading (1 1 1)
   hex ( 5  21 36 24 13 23 37 26 ) ($ns $nf $nz) simpleGrading (1 1 1)
   hex ( 28 6  25 38 30 14 27 39 ) ($ns $nf $nz) simpleGrading (1 1 1)

);

boundary
(
    cylinder
    {
        type wall;
        faces
        (
            (3 0 8  11)
            (2 3 11 10)
            (1 2 10 9 )
            (0 1 9  8 )
        );
    }
    channel
    {
        type wall;
        faces
        (
            // upper wall
            (37 23 21 36)
            (23 22 20 21)
            (22 35 34 20)

            // lower wall
            (38 28 30 39)
            (28 29 31 30)
            (29 32 33 31) 
        );
    }
    inlet
    {
        type patch;
        faces
        (
            (39 27 25 38)
            (27 26 24 25)
            (26 37 36 24)
        );
    }
    outlet
    {
        type patch;
        faces
        (
            (32 16 18 33)
            (16 17 18 19)
            (17 34 35 19)
        );
    }

    front
    {
        type empty;
        faces
        (
            // front side
            (39 30 14 27)
            (30 31 15 14)
            (31 33 18 15)
            (14 15 11 10)
            (27 14 13 26)
            (14 10 9  13)
            (15 12 8  11)
            (15 18 19 12)
            (26 13 23 37)
            (13 12 22 23)
            (9  8  12 13)
            (12 19 35 22)
        );
     } 
     
     back
     {
        type empty;
        faces
        (
            // bottom side
            (38 25 6  28)
            (6  7  29 28)
            (7  16 32 29)
            (2  3  7  6 )
            (25 24 5  6 )
            (6  5  1  2 )
            (3  0  4  7 )
            (4  17 16 7 )
            (24 36 21 5 )
            (5  21 20 4 )
            (1  5  4  0 )
            (4  20 34 17) 
        );
    }

);

mergePatchPairs
(
);

// ************************************************************************* //
