/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  6
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

convertToMeters 1;

L       20;    // Channel length
H       5;     // Channel height
W       0.1;   // Channel width (2D)
rad     0.5;   // Cylinder radius 
r2      1.0;   // Outer circular radius
Alf     45;    // Cylinder corner angle
mx      0.75;  // Horizontal cylinder center
my      0.5;   // Vertical cylinder center
       
alf     #calc "degToRad($Alf)";

// Cylinder and outer circular region points

xc1     #calc "$rad * cos($alf)";
yc1     #calc "$rad * sin($alf)";

xc2     #calc "-$xc1";
yc2     #calc "-$yc1";

xo1     #calc "$r2 * cos($alf)";
yo1     #calc "$r2 * sin($alf)";

xo2     #calc "-$xo1";
yo2     #calc "-$yo1";

// Outer channel corner points

XR      #calc "$mx * $L";
XL      #calc "($mx-1) * $L";
YT      #calc "$my * $H";
YB      #calc "($my-1) * $H";
WF      #calc " 0.5 * $W";
WB      #calc "-0.5 * $W";

//#calc   "printf(\"xc1 = %f, yc1 = %f, xc2 = %f, yc2 = %f, WF = %f\n\", $xc1, $yc1, $xc2, $yc2, $WF)";
//#calc   "printf(\"xo1 = %f, yo1 = %f, xo2 = %f, yo2 = %f, WB = %f\n\", $xo1, $yo1, $xo2, $yo2, $WB)";

vertices
(
    // Cylinder

    ( $xc1   $yc1    $WF )  // 0
    ( $xc2   $yc1    $WF )  // 1
    ( $xc2   $yc2    $WF )  // 2
    ( $xc1   $yc2    $WF )  // 3

    // Outer circular region
 
    ( $xo1   $yo2    $WF )  // 4
    ( $xo2   $yo1    $WF )  // 5
    ( $xo2   $yo2    $WF )  // 6
    ( $xo1   $yo1    $WF )  // 7

    // Outer channel

    ( $XR    $yo1    $WF )  // 8
    ( $XR    $YT     $WF )  // 9 
    ( $xo1   $YT     $WF )  // 10
    ( $xo2   $YT     $WF )  // 11
    ( $XL    $YT     $WF )  // 12

    ( $XL    $yo1    $WF )  // 13
    ( $XL    $yo2    $WF )  // 14
    ( $XL    $YB     $WF )  // 15
    ( $xo2   $YB     $WF )  // 16
    ( $xo1   $YB     $WF )  // 17
    
    ( $XR    $YB     $WF )  // 18
    ( $XR    $yo2    $WF )  // 19

    /*===========================
            SECOND PLANE
      =========================*/

    // Cylinder

    ( $xc1   $yc1    $WB )  // 20
    ( $xc2   $yc1    $WB )  // 21
    ( $xc2   $yc2    $WB )  // 22
    ( $xc1   $yc2    $WB )  // 23

    // Outer circular region
 
    ( $xo1   $yo2    $WB )  // 24
    ( $xo2   $yo1    $WB )  // 25
    ( $xo2   $yo2    $WB )  // 26
    ( $xo1   $yo1    $WB )  // 27

    // Outer channel

    ( $XR    $yo1    $WB )  // 28
    ( $XR    $YT     $WB )  // 29 
    ( $xo1   $YT     $WB )  // 30
    ( $xo2   $YT     $WB )  // 31
    ( $XL    $YT     $WB )  // 32

    ( $XL    $yo1    $WB )  // 33
    ( $XL    $yo2    $WB )  // 34
    ( $XL    $YB     $WB )  // 35
    ( $xo2   $YB     $WB )  // 36
    ( $xo1   $YB     $WB )  // 37
    
    ( $XR    $YB     $WB )  // 38
    ( $XR    $yo2    $WB )  // 39    

);


edges
(
//    arc 0 3   ($rad 0.0 $WF)
//    arc 20 23 ($rad 0.0 $WB) 
);

blocks
(
   // hex (0 1 1 0 3 2 4 5) (200 1 10) simpleGrading ( $ixrat  1  $rat )
   
   // Front outer: 0
   hex ( 0 1 2 3 4 5 6 7 ) (5 5 5) simpleGrading (1 1 1)

);

boundary
(
);

/*
boundary
(
    wall
    {
        type wall;
        faces
        (
            (3 2 4 5)
        );
    }
    inlet
    {
        type patch;
        faces
        (
            (0 3 5 0)
        );
    }
    outlet
    {
        type patch;
        faces
        (
            (1 4 2 1)
        );
    }
    front
    {
        type wedge;
        faces
        (
            (0 1 2 3)
        );
    }
    back
    {
        type wedge;
        faces
        (
            (0 5 4 1)
        );
    }
    axis
    {
        type empty;
        faces
        (
            (0 1 1 0)
        );
    }
);

*/

mergePatchPairs
(
);

// ************************************************************************* //
