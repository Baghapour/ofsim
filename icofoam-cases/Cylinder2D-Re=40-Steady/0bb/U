/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  6
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       volVectorField;
    object      U;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

dimensions      [0 1 -1 0 0 0 0];

internalField   uniform (4e-4 0 0);

boundaryField
{
    inlet
    {
        type    fixedValue;
        value   uniform (4e-4 0 0); // Re = 40

/* 
        type    codedFixedValue;
        value   uniform (1 0 0);
        name    parabolicInlet;
        code
        #{
               // const scalar t = this->db().time().value();
	       const fvPatch& boundaryPatch = patch();
               const vectorField& Cf = boundaryPatch.Cf();
               vectorField& field = *this; 
             
	       //const scalar Pi = constant::mathematical::pi;
             		  
               const scalar H = 0.25;
               const scalar U = 0.006;
 
               //const dictionary& transportProperties = db().lookupObject<IOdictionary>("transportProperties");
               //scalar visc =  readScalar(transportProperties.lookup("nu")));

               //scalar nu = readScalar(this->db().lookupObject<IOdictionary>("transportProperties").lookup("nu"));

               dimensionedScalar nu
               (
                   "nu",
                   dimViscosity,
                   this->db().lookupObject<IOdictionary>("transportProperties").lookup("nu")
               );

               scalar nu_value = nu.value(); 
 
               forAll(Cf,faceI)
               {
                    const scalar y = Cf[faceI][1];
		    //const scalar Func_t = (1.0 - 0.5*sin(Pi*t));
                    //field[faceI] = vector( Func_t*2*umn*(1-pow(r/rad,2)), 0, 0 );
                    field[faceI] = vector( 1.5 * U * ( 1.0 - pow(y/H,2) ), 0, 0 );
                    //printf("H = %f, u = %f, v = %f, w = %f\n",y,field[faceI][0],field[faceI][1],field[faceI][2]);
               }
 
        #};

*/

    }

    outlet
    {
	type    zeroGradient;  
    }

    cylinder
    {
        type    noSlip;
    }

    channel
    {
        type              freestream;
        freestreamValue   uniform (4e-4 0 0);
    }

    front
    {
        type    empty;
    }

    back
    {
        type    empty;
    }
}

// ************************************************************************* //
