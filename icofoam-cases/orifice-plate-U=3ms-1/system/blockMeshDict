/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  6
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
//
//        7,9-------------------6,8    17,19------------------16,18
//         |                     |       |                      |
//         |                     |       |                      |
//        3,5-------------------2,4----11,12------------------14,15         
//         |                     |       |                      |
//         |                     |       |                      | 
//         0---------------------1-------10---------------------13       
//
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

convertToMeters 0.001;

xrat    0.15;
ixrat   #calc "1.0/$xrat"; 
rat     1.0;
irat    #calc "1.0/$rat";

Theta   3.0;
RadTh   #calc "degToRad($Theta)";

Len     150.0;
Height  15.0;
Thck    2.0;
Horf    5.0;

//====== NODES

X1      0.0;
X2      #calc "$Len - 0.5*$Thck";
X3      #calc "$Len + 0.5*$Thck";
X4      #calc "2.0*$Len";

Y1      0.0;
Y2       4.993147673772869;   //#calc "$Horf   * cos( $RadTh )"; 
Y3      14.979443021318607;   //#calc "$Height * cos( $RadTh )"; 

Z1      0.0;
Z2      0.2616797812147191;   //#calc "$Horf   * sin( $RadTh )";
Z3      0.7850393436441574;   //#calc "$Height * sin( $RadTh )";

Z2m    -0.2616797812147191;   //#calc "-$Z2";
Z3m    -0.7850393436441574;   //#calc "-$Z3";


//#calc "printf(\" Z2 = %f \n \", $Z2)";
//#calc "printf(\" Y3 = %f \n \", $Y3)";
//#calc "printf(\" Y4 = %f \n \", $Y4)";

vertices
(
    ( $X1  $Y1  $Z1 ) // 0
    ( $X2  $Y1  $Z1 ) // 1
    ( $X2  $Y2  $Z2m) // 2
    ( $X1  $Y2  $Z2m) // 3
    ( $X2  $Y2  $Z2 ) // 4
    ( $X1  $Y2  $Z2 ) // 5 

    ( $X2  $Y3  $Z3m) // 6
    ( $X1  $Y3  $Z3m) // 7
    ( $X2  $Y3  $Z3 ) // 8
    ( $X1  $Y3  $Z3 ) // 9

    ( $X3  $Y1  $Z1 ) // 10
    ( $X3  $Y2  $Z2m) // 11
    ( $X3  $Y2  $Z2 ) // 12 

    ( $X4  $Y1  $Z1 ) // 13
    ( $X4  $Y2  $Z2m) // 14
    ( $X4  $Y2  $Z2 ) // 15

    ( $X4  $Y3  $Z3m) // 16
    ( $X3  $Y3  $Z3m) // 17
    ( $X4  $Y3  $Z3 ) // 18
    ( $X3  $Y3  $Z3 ) // 19
);

blocks
(
     //================================================  
     // Cartesin to Cylindrical: (x,y,z) -> (z,theta,r)
     //================================================
     hex (0 1 1 0 5 4 2 3)         (250 1 20) simpleGrading ($xrat  1  1)
     hex (5 4 2 3 9 8 6 7)         (250 1 40) simpleGrading ($xrat  1  1)
     hex (1 10 10 1 4 12 11 2)     (10  1 20) simpleGrading (1      1  1)
     hex (10 13 13 10 12 15 14 11) (250 1 20) simpleGrading ($ixrat 1  1)
     hex (12 15 14 11 19 18 16 17) (250 1 40) simpleGrading ($ixrat 1  1)
);

edges
(
);

boundary
(
    wall
    {
        type wall;
        faces
        (
            (9 8 6 7)
            (2 6 8 4)
            (4 12 11 2)
            (12 19 17 11)
            (19 18 16 17)
        );
    }
    inlet
    {
        type patch;
        faces
        (
            (0 5 3 0)
            (5 9 7 3)
        );
    }
    outlet
    {
        type patch;
        faces
        (
            (13 14 15 13)
            (14 16 18 15)
        );
    }
    front
    {
        type wedge;
        faces
        (
            (0 1 4 5)
            (4 8 9 5)
            (1 10 12 4)
            (10 13 15 12)
            (12 15 18 19)
        );
    }
    back
    {
        type wedge;
        faces
        (
            (0 3 2 1)
            (3 7 6 2)
            (1 2 11 10)
            (10 11 14 13)
            (11 17 16 14)
        );
    }
    axis
    {
        type empty;
        faces
        (
            (0 1 1 0)
            (1 10 10 1)
            (10 13 13 10)
        );
    }
);


mergePatchPairs
(
);

// ************************************************************************* //
